<?xml version="1.0" encoding="UTF-8"?>
<!--
 * @(#)build-jhotdraw8.xml
 * Copyright (c) 2015-2017 by the authors and contributors of JHotDraw. MIT License.
-->
<project name="jhotdraw8" basedir="." default="all">
  
    <!-- ignore system classpath to get consistent builds on different platforms -->
    <property name="build.sysclasspath" value="ignore"/>

    <!--
    <property name="jdk" value="${java.home}"/>
    -->
    <property name="jdk" value="/Library/Java/JavaVirtualMachines/jdk1.8.0_152.jdk/Contents/Home"/>
    <property name="jdk.version" value="8"/>

        <exec executable="git" outputproperty="git.hash.date.author" failifexecutionfails="false" errorproperty="">
            <arg value="log"/>
            <arg value="-1"/>
            <arg value="--pretty=format:%h %cI %cn"/>
        </exec>
        <exec executable="git" outputproperty="git.describe" failifexecutionfails="false" errorproperty="">
            <arg value="describe"/>
            <arg value="--tags"/>
            <arg value="--always"/>
            <arg value="HEAD"/>
        </exec>
        
     <property name="name" value="${ant.project.name}"/>
    <property name="copyright" value="Copyright (c) 2017 by the authors and contributors of JHotDraw."/>
    <property name="license.name" value="MIT License"/>
    <property name="license" value="${license.name}. https://opensource.org/licenses/mit-license.php"/>
    <property name="version" value="${git.describe}"/>
    <echo message="${name} ${version} / desc:${git.describe} rev:${git.hash.date.author}"/>

    <property name="manifest.application-name" value="${ant.project.name}"/>
    <property name="manifest.implementation-version" value="${version}"/>
    <property name="manifest.implementation-vendor" value="org.jhotdraw"/>
    <property name="manifest.main-class" value="org.jhotdraw8.samples.grapher.GrapherApplication"/>

    <property name="build" value="build"/>
    <property name="bin" value="bin"/>
    <property name="doc" value="doc"/>
    <property name="dist" value="dist"/>
    <property name="build.javadoc" value="${build}/javadoc"/>
    <property name="lib" value="lib"/>
    <property name="lib.runtime" value="${lib}/runtime"/>
    <property name="lib.compile" value="${lib}/compile"/>
    <property name="lib.doc" value="${lib}/doc"/>
    <property name="build.doc" value="${build}/doc"/>
    <property name="lib.test" value="${lib}/test"/>
    <property name="src" value="src"/>
    <property name="doc" location="doc"/>
    <property name="build.main.classes" value="${build}/main/classes"/>
    <property name="build.doc.classes" value="${build}/doc/classes"/>
    <property name="build.doc.doc" value="${build}/doc/doc"/>
    <property name="build.doc.tools" value="${build}/doc/tools"/>
    <property name="lib.doc.docbook" value="${build.doc.tools}/docbook-5.0b5"/>
    <property name="lib.doc.xalan" value="${build.doc.tools}/xalan-j_2_7_2"/>
    <property name="lib.doc.docbook-xsl" value="${build.doc.tools}/docbook-xsl-ns-1.79.1"/>
    <property name="build.doc.html" value="${build}/doc/html"/>
    <property name="build.doc.chunked" value="${build}/doc/chunk"/>
    <property name="build.doc" value="${build}/doc"/>
    <property name="build.main.jars" value="${build}/jars"/>
    <property name="dist.standalone" value="${dist}/${ant.project.name}/${manifest.application-name}"/>

    <property name="src.main.java" value="${src}/main/java"/>
    <property name="src.doc.java" value="${src}/doc/java"/>
    <property name="src.test.java" value="${src}/test/java"/>
    <property name="src.doc.xsl" value="${src}/doc/xsl"/>

    <!-- CheckerFramework-->
      <property environment="env"/>
      <!--property name="checkerframework" value="${env.CHECKERFRAMEWORK}" /-->
      <property name="checkerframework" value="${lib.compile}/checker-framework-2.4.0" />
    <!-- On Mac/Linux, use the javac shell script; on Windows, use javac.bat -->
    <condition property="cfJavac" value="javac.bat" else="javac">
        <os family="windows" />
    </condition>
    <presetdef name="jsr308.javac">
    <javac fork="yes" executable="${checkerframework}/checker/bin/${cfJavac}" >
      <!-- JSR-308-related compiler arguments -->
      <compilerarg value="-version"/>
      <compilerarg value="-implicit:class"/>
    </javac>
  </presetdef>
    
    <target name="init">
        <echo>app.version: ${version}</echo>
        <echo>java.home: ${java.home}</echo>
        <echo>jdk       : ${jdk}</echo>
        <echo>jdk.version: ${jdk.version}</echo>
    </target>

    <target name="do-clean.compile" depends="init">
        <delete dir="${build.main.classes}"/>
    </target>
    <target name="do-clean.jar" depends="init">
        <delete dir="${build.main.jars}"/>
    </target>
    <target name="do-clean.dist" depends="init">
        <delete dir="${dist.standalone}"/>
    </target>
    <target name="do-clean" depends="init">
        <delete dir="${build}"/>
        <delete dir="${dist}"/>
    </target>
    
      <target name="do-check-nullness"
          description="Check for null pointer dereferences"
          depends="init">
        <mkdir dir="${build.main.classes}"/>
    <!-- use jsr308.javac instead of javac -->
    <jsr308.javac  source="${jdk.version}" target="${jdk.version}" encoding="UTF-8" destdir="${build.main.classes}"
               debug="true"
        >
      <compilerarg line="-processor org.checkerframework.checker.nullness.NullnessChecker"/>
      <!-- optional, to not check uses of library methods:
        <compilerarg value="-AskipUses=^(java\.awt\.|javax\.swing\.)"/>
      -->
      <compilerarg line="-Xmaxerrs 100"/>
     <src path="${src.main.java}"/>
            <classpath>
                <fileset dir="${lib.compile}" />
                <fileset file="${jdk}/../lib/tools.jar" />
            </classpath>
            <compilerarg value="-version"/>
    </jsr308.javac>
  </target>

    
    
    <target name="do-compile.main" depends="init">
        <mkdir dir="${build.main.classes}"/>
        <javac executable="${jdk}/bin/javac" fork="yes"
               source="${jdk.version}" target="${jdk.version}" encoding="UTF-8" destdir="${build.main.classes}"
               debug="true"
        >
            <compilerarg value="-Xlint"/>
            <src path="${src.main.java}"/>
            <classpath>
                <fileset dir="${lib.compile}" />
                <fileset file="${jdk}/lib/tools.jar" />
            </classpath>
            <compilerarg value="-version"/>
        </javac>
        <copy todir="${build.main.classes}">
            <fileset dir="${src.main.java}">
                <exclude name="**/.*"/>
                <include name="**/*.properties"/>
                <include name="**/*.png"/>
                <include name="**/*.fxml"/>
                <include name="**/*.css"/>
            </fileset>
        </copy>
    </target>
    <target name="do-docbook.unzip-docbook" depends="init">
        <unzip dest="${build.doc.tools}" src="${lib.doc}/docbook-5.0b5.zip"/>
        <unzip dest="${build.doc.tools}" src="${lib.doc}/docbook-xsl-ns-1.79.1.zip"/>
        <unzip dest="${build.doc.tools}" src="${lib.doc}/xalan-j_2_7_2-bin.zip"/>
        <copy  todir="${lib.doc.xalan}">
            <fileset dir="${lib.doc}">
                <include name="*.jar"/>
            </fileset>
        </copy>
    </target>
    <target name="do-docbook.copy" depends="init">
        <copy  todir="${build.doc.doc}">
            <fileset dir="${doc}"/>
        </copy>
        <copy  todir="${lib.doc.docbook-xsl}">
            <fileset dir="${doc}/config">
                <include name="*.xsl"/>
            </fileset>
        </copy>
        <copy  todir="${lib.doc.docbook-xsl}">
            <fileset dir="${doc}">
                <include name="custom-*.xsl"/>
            </fileset>
        </copy>
    </target>
    <target name="do-docbook.asciidoctor" depends="init,do-docbook.copy">
        <!--
            <pathconvert property="asciidocfiles" pathsep=" ">
                <map from="${basedir}${file.separator}${build.doc.doc}${file.separator}" to=""/>
                <fileset dir="${build.doc.doc}">
                    <include name="**/*.txt"/>
                </fileset>  
            </pathconvert>
            <echo message="asciidocfiles: ${asciidocfiles}"/>
        <exec executable="/usr/local/bin/asciidoctor" dir="${build.doc.doc}">
          <arg line="-b docbook5"/>
          <arg line="- -doctype article"/>
          <arg line="${asciidocfiles}"/>
        </exec>
        -->
    </target>
    <target name="do-docbook.crossreference" depends="init,do-docbook.asciidoctor" description="creates a cross-reference uses unix xsltproc command">
    </target>
    <target name="do-docbook.crossreferenceOFF" depends="init,do-docbook.asciidoctor" description="creates a cross-reference uses unix xsltproc command">

<!--        
        <apply executable="xsltproc" dir=".">
            <env key="XML_CATALOG_FILES" value="${basedir}/${doc}/catalog.xml"/>
            <env key="XML_DEBUG_CATALOG" value="1"/>
          
            <arg value="- -output"/>
            <arg value="${build.doc.doc}/handbook/general/introduction/crossreference.xml"/>
            <arg value="- -param"/>
            <arg value="writing.mode"/>
            <arg value="lr"/>
            <arg value="- -xinclude"/>
            <arg value="${src.doc.xsl}/crossreference.xsl"/>
            <srcfile/>           
            
            <fileset dir="${build.doc.doc}">
                <include name="**/Book.xml"/>
            </fileset>  
        </apply>
        -->
        
        <exec executable="xsltproc" dir=".">
            <env key="XML_CATALOG_FILES" value="${basedir}/${doc}/catalog.xml"/>
            <env key="XML_DEBUG_CATALOG" value="1"/>
          
            <arg value="--output"/>
            <arg value="${build.doc.doc}/handbook/general/introduction/crossreference.xml"/>
            <arg value="--param"/>
            <arg value="writing.mode"/>
            <arg value="lr"/>
            <arg value="--xinclude"/>
            <arg value="${src.doc.xsl}/crossreference.xsl"/>
            <arg value="${doc}/JHotDraw8Handbook.xml"/>
        </exec>
        <exec executable="xsltproc" dir=".">
            <env key="XML_CATALOG_FILES" value="${basedir}/${doc}/catalog.xml"/>
            <env key="XML_DEBUG_CATALOG" value="1"/>
            <arg value="--output"/>
            <arg value="${build.doc.doc}/handbook/general/introduction/References.xml"/>
            <arg value="--param"/>
            <arg value="writing.mode"/>
            <arg value="lr"/>
            <arg value="--xinclude"/>
            <arg value="${src.doc.xsl}/collectbiblio.xsl"/>
            <arg value="${doc}/JHotDraw8Handbook.xml"/>
        </exec>
        <exec executable="xsltproc" dir=".">
            <env key="XML_CATALOG_FILES" value="${basedir}/${doc}/catalog.xml"/>
            <env key="XML_DEBUG_CATALOG" value="1"/>
            <arg value="--output"/>
            <arg value="${build.doc.doc}/srs/general/introduction/References.xml"/>
            <arg value="--param"/>
            <arg value="writing.mode"/>
            <arg value="lr"/>
            <arg value="--xinclude"/>
            <arg value="${src.doc.xsl}/collectbiblio.xsl"/>
            <arg value="${doc}/JHotDraw8SRS.xml"/>
        </exec>
    </target>
    <target name="do-docbook.validate" depends="init,do-docbook.asciidoctor,do-docbook.crossreference">
        <!--property name="docbookfiles" value="doc/JHotDraw8Handbook.xml"/-->
        <pathconvert property="docbookfiles" pathsep=" ">
            <map from="${basedir}${file.separator}" to=""/>
            
<!--            <fileset dir="${build.doc.doc}/handbook">
                <include name="*.xml"/>
                <exclude name="catalog.xml"/>
            </fileset>  
            <fileset dir="${build.doc.doc}/srs">
                <include name="*.xml"/>
                <exclude name="catalog.xml"/>
            </fileset>  -->
            <fileset dir="${build.doc.doc}">
                <include name="**/Book.xml"/>
            </fileset>  
        </pathconvert>
        <echo message="docbookfiles: ${docbookfiles}"/>
        <exec executable="xmllint" dir=".">
            <env key="XML_CATALOG_FILES" value="${basedir}/${doc}/validate/catalog.xml"/>
            
            <arg value="--noout"/>
            <arg value="--xinclude"/>
            <arg value="--schema"/>
            <arg value="${lib.doc.docbook}/xsd/docbook.xsd"/>
<!--           <arg value="- -relaxng"/>
            <arg value="${lib.doc.docbook}/rng/docbook.rng"/>-->
            <arg line="${docbookfiles}"/>
        </exec>
    </target>
    <target name="do-docbook.transform-hello.xsltproc" depends="init" description="uses unix xsltproc command">  
        <apply executable="xsltproc" dir="." force="true">
            <env key="XML_CATALOG_FILES" value="${basedir}/${doc}/catalog.xml"/>
            <env key="XML_DEBUG_CATALOG" value="1"/>

            <arg value="--output"/>
            <targetfile/>
            <arg value="--param"/>
            <arg value="writing.mode"/>
            <arg value="lr"/>
            <arg value="--stringparam"/>
            <arg value="bibliography.collection"/>
            <arg value="${basedir}/${doc}/bibliography.xml"/>
            <arg value="--xinclude"/>
            <arg value="${lib.doc.docbook-xsl}/xhtml5/docbook.xsl"/>
            <srcfile/>
          
            <fileset dir="${doc}" includes="*.xml"/>
            <mapper type="glob" from="*.xml" to="${basedir}/${build.doc.html}/*/index.html"/>
        </apply>
      
        <apply executable="xsltproc" dir="." force="true">
            <env key="XML_CATALOG_FILES" value="${basedir}/${doc}/catalog.xml"/>
            <env key="XML_DEBUG_CATALOG" value="1"/>

            <arg value="--output"/>
            <targetfile/>
            <arg value="--param"/>
            <arg value="writing.mode"/>
            <arg value="lr"/>
            <arg value="--stringparam"/>
            <arg value="bibliography.collection"/>
            <arg value="${basedir}/${doc}/bibliography.xml"/>
            <arg value="--xinclude"/>
            <arg value="${lib.doc.docbook-xsl}/epub3/chunk.xsl"/>
            <srcfile/>
          
            <fileset dir="${doc}" >
                <include name="helloworld.xml"/>
            </fileset>
            <mapper type="glob" from="*.xml" to="${basedir}/${build}/doc/epub3/helloworld/*"/>
        </apply>
        <zip basedir="${basedir}/${build}/doc/epub3/helloworld" 
             destfile="${basedir}/${build}/doc/epub3/helloworld.epub">
            <include name="mimetype"/>
            <include name="META-INF/**"/>
            <include name="OEBPS/**"/>
        </zip>
      
    </target>
    <target name="do-docbook.transform.xsltproc" depends="init,do-docbook.transform.xsltproc.xhtml5,do-docbook.transform.xsltproc.chunked,do-docbook.transform.xsltproc.epub3" description="uses unix xsltproc command">  
    </target>
    <target name="do-docbook.transform.xsltproc.xhtml5" depends="init" description="uses unix xsltproc command">  
        <apply executable="xsltproc" dir="." force="true">
            <env key="XML_CATALOG_FILES" value="${basedir}/${doc}/catalog.xml"/>
            <env key="XML_DEBUG_CATALOG" value="1"/>

            <arg value="--output"/>
            <targetfile/>
            <arg value="--param"/>
            <arg value="writing.mode"/>
            <arg value="lr"/>
            <arg value="--stringparam"/>
            <arg value="bibliography.collection"/>
            <arg value="${basedir}/${doc}/bibliography.xml"/>
            <arg value="--xinclude"/>
            <arg value="${lib.doc.docbook-xsl}/xhtml5/docbook.xsl"/>
            <!--<arg value="${lib.doc.docbook-xsl}/custom-xhtml5.xsl"/>-->
            <srcfile/>
          
            <fileset dir="${build.doc.doc}" >
                <include name="handbook/JHotDraw8Handbook.xml"/>
                <include name="srs/JHotDraw8SRS.xml"/>
            </fileset>
            <mapper type="glob" from="*.xml" to="${basedir}/${build.doc.html}/*/index.html"/>
        </apply>
    </target>
    <target name="do-docbook.transform.xsltproc.chunked" depends="init,do-docbook.validate" description="uses unix xsltproc command">  
        <apply executable="xsltproc" dir="." force="true">
            <env key="XML_CATALOG_FILES" value="${basedir}/${doc}/catalog.xml"/>
            <env key="XML_DEBUG_CATALOG" value="1"/>

            <arg value="--output"/>
            <targetfile/>
            <arg value="--param"/>
            <arg value="writing.mode"/>
            <arg value="lr"/>
            <arg value="--stringparam"/>
            <arg value="bibliography.collection"/>
            <arg value="${basedir}/${doc}/bibliography.xml"/>
            <arg value="--xinclude"/>
            <arg value="${lib.doc.docbook-xsl}/xhtml5/chunk.xsl"/>
            <srcfile/>
          
            <fileset dir="${build.doc.doc}" >
                <include name="handbook/JHotDraw8Handbook.xml"/>
                <include name="srs/JHotDraw8SRS.xml"/>
            </fileset>
            <mapper type="glob" from="*.xml" to="${basedir}/${build.doc.chunked}/*/index.html"/>
        </apply>
        <copy toDir="${basedir}/${build.doc.chunked}/handbook/JHotDraw8Handbook">
            <fileset dir="${doc}/srs/requirements/draw" >
                <include name="**/*.svg"/>
            </fileset>
        </copy>
        <copy toDir="${basedir}/${build.doc.chunked}/srs/JHotDraw8SRS">
            <fileset dir="${doc}/srs/requirements/draw" >
                <include name="**/*.svg"/>
            </fileset>
        </copy>
    </target>
    <target name="do-docbook.transform.xsltproc.fo" depends="init" description="uses unix xsltproc command">  
        <apply executable="xsltproc" dir="." force="true">
            <env key="XML_CATALOG_FILES" value="${basedir}/${doc}/catalog.xml"/>
            <env key="XML_DEBUG_CATALOG" value="1"/>

            <arg value="--output"/>
            <targetfile/>
            <arg value="--param"/>
            <arg value="writing.mode"/>
            <arg value="lr"/>
            <arg value="--stringparam"/>
            <arg value="bibliography.collection"/>
            <arg value="${basedir}/${doc}/bibliography.xml"/>
            <arg value="--xinclude"/>
            <arg value="${lib.doc.docbook-xsl}/fo/docbook.xsl"/>
            <srcfile/>
          
            <fileset dir="${build.doc.doc}" >
                <include name="handbook/JHotDraw8Handbook.xml"/>
                <include name="srs/JHotDraw8SRS.xml"/>
            </fileset>
            <mapper type="glob" from="*.xml" to="${basedir}/${build}/doc/fo/*.xml"/>
        </apply>
    </target>
    
    <target name="do-docbook.transform.xsltproc.epub3" depends="init" description="uses unix xsltproc command">  
        <apply executable="xsltproc" dir="." force="true">
            <env key="XML_CATALOG_FILES" value="${basedir}/${doc}/catalog.xml"/>
            <env key="XML_DEBUG_CATALOG" value="1"/>

            <arg value="--output"/>
            <targetfile/>
            <arg value="--param"/>
            <arg value="writing.mode"/>
            <arg value="lr"/>
            <arg value="--stringparam"/>
            <arg value="bibliography.collection"/>
            <arg value="${basedir}/${doc}/bibliography.xml"/>
            <arg value="--xinclude"/>
            <arg value="${lib.doc.docbook-xsl}/epub3/chunk.xsl"/>
            <srcfile/>
          
            <fileset dir="${build.doc.doc}" >
                <include name="handbook/JHotDraw8Handbook.xml"/>
                <include name="srs/JHotDraw8SRS.xml"/>
            </fileset>
            <mapper type="glob" from="*.xml" to="${basedir}/${build}/doc/epub3/*"/>
        </apply>
      
        <copy toDir="${basedir}/${build}/doc/epub3/handbook/OEBPS">
            <fileset dir="${doc}/handbook/draw" >
                <include name="**/*.svg"/>
            </fileset>
        </copy>
        <copy toDir="${basedir}/${build}/doc/epub3/srs/OEBPS">
            <fileset dir="${doc}/srs/requirements/draw" >
                <include name="**/*.svg"/>
            </fileset>
        </copy>     
      
        <zip basedir="${basedir}/${build}/doc/epub3/srs" 
             destfile="${basedir}/${build}/doc/epub3/srs.epub">
            <include name="mimetype"/>
            <include name="META-INF/**"/>
            <include name="OEBPS/**"/>
        </zip>
    </target>

    <target name="do-docbook.transform.built-in" depends="init" description="uses ant xslt command">
        <xslt basedir="${doc}" destdir="${build.doc.html}/book-built-in"
              style="${lib.doc.docbook-xsl}/xhtml5/docbook.xsl">
            <include name="JHotDraw8Handbook.xml"/>
        </xslt>
    </target>
    <target name="do-docbook.transform.xbuilt-in-saxon" depends="init" description="uses saxon with ant xslt command">
        <xslt basedir="${doc}" destdir="${build.doc.html}/xslt-with-saxon"
              style="${lib.doc.docbook-xsl}/xhtml5/docbook.xsl">
            <include name="JHotDraw8Handbook.xml"/>
            <classpath>
                <fileset dir="${lib.doc.docbook-xsl}/tools/lib">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
            <factory name="net.sf.saxon.TransformerFactoryImpl"/>      
        </xslt>
    </target>
    <target name="do-docbook.transform.xalan.chunked.helloworld" depends="init" description="uses xalan">
        <mkdir dir="${build.doc.chunked}/xalan/helloworld"/>
        <java classname="org.apache.xalan.xslt.Process" dir="${build.doc.chunked}/xalan/helloworld">
            <arg value="-in"/>
            <arg file="${doc}/helloworld-assembly-entity.xml"/>
            <arg value="-xsl"/>
            <arg file="${lib.doc.docbook-xsl}/xhtml5/chunk.xsl"/>
            <classpath>
                <fileset dir="${lib.doc.docbook-xsl}/tools/lib">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
        </java>
    </target>
    <macrodef name="call-saxon">
        <attribute name="srcfile"/>
        <attribute name="srcdir"/>
        <attribute name="destdir"/>
        <attribute name="imgdestdir" default="@{destdir}"/>
        <attribute name="destfile"/>
        <attribute name="style"/>
        <sequential>
            <mkdir dir="@{destdir}"/>
            <java classname="com.icl.saxon.StyleSheet"  dir="@{destdir}">
                <jvmarg value="-Dxslthl.config=file://${basedir}/${lib.doc.docbook-xsl}/highlighting/xslthl-config.xml"/>
                <jvmarg value="-Djavax.xml.parsers.DocumentBuilderFactory=org.apache.xerces.jaxp.DocumentBuilderFactoryImpl"/>
                <jvmarg value="-Dorg.apache.xerces.xni.parser.XMLParserConfiguration=org.apache.xerces.parsers.XIncludeParserConfiguration"/>
                <jvmarg value="-Djavax.xml.parsers.SAXParserFactory=org.apache.xerces.jaxp.SAXParserFactoryImpl"/>
                <jvmarg value="-Dxml.catalog.files=${basedir}/${doc}/catalog.xml"/>
                <arg line="-x org.apache.xml.resolver.tools.ResolvingXMLReader"/>
                <arg line="-y org.apache.xml.resolver.tools.ResolvingXMLReader"/>
                <arg line="-r org.apache.xml.resolver.tools.CatalogResolver"/>
                <arg value="-o"/>
                <arg file="@{destfile}"/>
                <arg file="@{srcfile}"/>
                <arg file="@{style}"/>
                <classpath>
                    <fileset dir="${lib.doc.docbook-xsl}/tools/lib">
                        <include name="**/*.jar"/>
                    </fileset>
                    <fileset dir="${lib.doc.xalan}">
                        <include name="**/*.jar"/>
                    </fileset>
                </classpath>
            </java>
        
            <copy toDir="@{imgdestdir}" flatten="true" >
                <fileset dir="@{srcdir}" >
                    <include name="**/*.svg"/>
                    <include name="**/*.png"/>
                </fileset>
            </copy>     
        </sequential>
    </macrodef>
    <target name="do-docbook.transform.saxon.chunk" depends="init,do-docbook.crossreference" description="uses saxon">
        <call-saxon destdir="${build.doc}/chunk/handbook"
                    srcfile="${build.doc.doc}/handbook/Book.xml"
                    srcdir="${build.doc.doc}/handbook"
                    destfile="${build.doc}/chunk/handbook/JHotDraw8Handbook.xhtml"
                    style="${lib.doc.docbook-xsl}/custom-chunk.xsl"
        />
        
        <call-saxon destdir="${build.doc}/chunk/srs"
                    srcfile="${build.doc.doc}/srs/Book.xml"
                    srcdir="${build.doc.doc}/srs"
                    destfile="${build.doc}/chunk/srs/JHotDraw8SRS.xhtml"
                    style="${lib.doc.docbook-xsl}/custom-chunk.xsl"
        />
    </target>
    <target name="do-docbook.transform.saxon.epub3" depends="init,do-docbook.crossreference" description="uses saxon">
        <call-saxon destdir="${build.doc}/epub3/handbook"
                    srcfile="${build.doc.doc}/handbook/Book.xml"
                    srcdir="${build.doc.doc}/handbook"
                    destfile="${build.doc.html}/epub3/JHotDraw8Handbook.xhtml"
                    style="${lib.doc.docbook-xsl}/custom-epub3.xsl"
                    imgdestdir="${build.doc}/epub3/handbook/OEBPS"
        />
        
        <call-saxon destdir="${build.doc}/epub3/srs"
                    srcfile="${build.doc.doc}/srs/Book.xml"
                    srcdir="${build.doc.doc}/srs"
                    destfile="${build.doc.html}/epub3/srs/JHotDraw8SRS.xhtml"
                    style="${lib.doc.docbook-xsl}/custom-epub3.xsl"
                    imgdestdir="${build.doc}/epub3/srs/OEBPS"
        />
        
        <zip basedir="${basedir}/${build.doc}/epub3/srs" 
                     destfile="${basedir}/${build.doc}/epub3/JHotDraw8-SRS.epub">
            <include name="mimetype"/>
            <include name="META-INF/**"/>
            <include name="OEBPS/**"/>
        </zip>
        <zip basedir="${basedir}/${build.doc}/epub3/handbook" 
                     destfile="${basedir}/${build.doc}/epub3/JHotDraw8-Handbook.epub">
            <include name="mimetype"/>
            <include name="META-INF/**"/>
            <include name="OEBPS/**"/>
        </zip>
        
        
    </target>
    <target name="do-docbook.transform.saxon.xhtml5" depends="init,do-docbook.crossreference" description="uses saxon">
         <call-saxon destdir="${build.doc}/html5/handbook"
                    srcfile="${build.doc.doc}/handbook/Book.xml"
                    srcdir="${build.doc.doc}/handbook"
                    destfile="${build.doc}/html5/handbook/JHotDraw8Handbook.xhtml"
                    style="${lib.doc.docbook-xsl}/custom-xhtml5.xsl"
        />
        
        <call-saxon destdir="${build.doc}/html5/srs"
                    srcfile="${build.doc.doc}/srs/JHotDraw8SRS.xml"
                    srcdir="${build.doc.doc}/srs"
                    destfile="${build.doc}/html5/srs/JHotDraw8SRS.xhtml"
                    style="${lib.doc.docbook-xsl}/custom-xhtml5.xsl"
        />
    </target>
    <target name="do-docbook.transform.xalan.chunked" depends="init,do-docbook.crossreference" description="uses xalan">
        <mkdir dir="${build.doc.chunked}/xalan/handbook"/>
        <java classname="org.apache.xalan.xslt.Process" dir="${build.doc.chunked}/xalan/handbook">
            <!--
                    <jvmarg value="-Djavax.xml.parsers.DocumentBuilderFactory=org.apache.xerces.jaxp.DocumentBuilderFactoryImpl"/>
            <jvmarg value="-Djavax.xml.parsers.SAXParserFactory=org.apache.xerces.jaxp.SAXParserFactoryImpl"/>
            -->
            <jvmarg value="-Dorg.apache.xerces.xni.parser.XMLParserConfiguration=org.apache.xerces.parsers.XIncludeParserConfiguration"/>
            <jvmarg value="-Dxml.catalog.files=${basedir}/${doc}/catalog.xml"/>
            <jvmarg value="-Dxml.catalog.verbosity=1"/>
            <jvmarg value="-Dxslthl.config=file:///${lib.doc.docbook-xsl}/highlighting/xslthl-config.xml"/>
            <arg value="-ENTITYRESOLVER"/>
            <arg value="org.apache.xml.resolver.tools.CatalogResolver"/>
            <arg value="-URIRESOLVER"/>
            <arg value="org.apache.xml.resolver.tools.CatalogResolver"/>
            <arg value="-in"/>
            <arg file="${build.doc.doc}/handbook/JHotDraw8Handbook.xml"/>
            <arg value="-xsl"/>
            <arg file="${lib.doc.docbook-xsl}/xhtml5/chunk.xsl"/>
            <arg line="-param highlight.source 1"/>
            <arg line="-param callout.graphics 0"/>
            <arg line="-param callout.unicode 1 "/>
            <!--
            <arg line="-param use.extensions 1"/>
            <arg line="-param linenumbering.extension 1"/>
            -->
            <classpath>
                <fileset dir="${lib.doc.docbook-xsl}/tools/lib">
                    <include name="**/*.jar"/>
                </fileset>
                <fileset dir="${lib.doc.xalan}">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
        </java>
    </target>
    <target name="do-docbook.transform.xalan" depends="init" description="uses xalan">
        <!--<java classname="org.apache.xalan.xslt.EnvironmentCheck">
            <classpath>
                <fileset dir="${lib.doc.docbook-xsl}/tools/lib">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
        </java>        
        -->
        <java classname="org.apache.xalan.xslt.Process">
            <arg value="-out"/>
            <arg file="${build.doc.html}/xalan-helloworld-assembly-entity.xhtml"/>
            <arg value="-in"/>
            <arg file="${doc}/helloworld-assembly-entity.xml"/>
            <arg value="-xsl"/>
            <arg file="${lib.doc.docbook-xsl}/xhtml5/docbook.xsl"/>
            <classpath>
                <fileset dir="${lib.doc.docbook-xsl}/tools/lib">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
        </java>
    </target>
    <target name="do-docbook.transform.saxon-helloworld" depends="init" description="uses saxon">
<!--        <java classname="com.icl.saxon.StyleSheet">
            <arg value="-o"/>
            <arg file="${build.doc.html}/saxon/helloworld.xhtml"/>
            <arg file="${doc}/HelloWorld/Book.xml"/>
            <arg file="${lib.doc.docbook-xsl}/xhtml5/docbook.xsl"/>
            <classpath>
                <fileset dir="${lib.doc.docbook-xsl}/tools/lib">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
        </java>-->
        
        
        <call-saxon destdir="${build.doc}/epub3/helloworld"
                            srcfile="${doc}/HelloWorld/Book.xml"
                            srcdir="${doc}/HelloWorld"
                            destfile="${build.doc.html}/epub3/HelloWorld.xhtml"
                            style="${lib.doc.docbook-xsl}/custom-epub3.xsl"
                            imgdestdir="${build.doc}/epub3/helloworld/OEBPS"
        />
              <zip basedir="${basedir}/${build.doc}/epub3/helloworld" 
                     destfile="${basedir}/${build.doc}/epub3/HelloWorld.epub">
            <include name="mimetype"/>
            <include name="META-INF/**"/>
            <include name="OEBPS/**"/>
        </zip>
    </target>
    <target name="do-docbook" depends="do-docbook.compile,do-docbook.unzip-docbook,do-docbook.asciidoctor,do-docbook.validate,do-docbook.transform.xsltproc" description="generates specification and user documentation">
    </target>
      
    <target name="do-docbook.compile" depends="init">
        <mkdir dir="${build.doc.classes}"/>
        <javac executable="${jdk}/bin/javac" fork="yes"
               source="${jdk.version}" target="${jdk.version}" encoding="UTF-8" destdir="${build.doc.classes}"
               debug="true"
        >
            <compilerarg value="-Xlint"/>
            <src path="${src.doc.java}"/>
            <classpath>
                <fileset dir="${lib.doc}" />
                <fileset file="${jdk}/lib/tools.jar" />
            </classpath>
            <compilerarg value="-version"/>
        </javac>
        <copy todir="${build.doc.classes}">
            <fileset dir="${src.doc.java}">
                <exclude name="**/.*"/>
                <include name="**/*.properties"/>
                <include name="**/*.png"/>
                <include name="**/*.fxml"/>
                <include name="**/*.css"/>
            </fileset>
        </copy>
    </target>
    <target depends="init" name="do-javadoc">
        <mkdir dir="${build.javadoc}"/>
        <javadoc destdir="${build.javadoc}" 
                 footer="&lt;font size=-2&gt;${copyright}&lt;/font&gt;"
                 header="${ant.project.name} ${version}" 
                 windowtitle="${ant.project.name} ${version}"
                 maxmemory="256M"
                 overview="${src.main.java}/org/jhotdraw8/overview.html"
                 charset="UTF-8"
                 executable="${jdk}/bin/javadoc"
        >
            <taglet name="org.jhotdraw8.javadoc.DesignPatternTaglet" path="${build.doc.classes}"/>
            <taglet name="org.jhotdraw8.javadoc.DesignOverviewTaglet" path="${build.doc.classes}"/>
            <packageset dir="${src.main.java}">
                <include name="org/jhotdraw/**"/>
            </packageset>
            <sourcepath>
                <pathelement location="${src.main.java}"/>
            </sourcepath>
            <classpath>
                <pathelement path="${lib.runtime}"/>
                <fileset file="${jdk}/lib/tools.jar" />
                <!--pathelement path="${build.javadoc}"/-->
            </classpath>
        </javadoc>
    </target>
    <target depends="init" name="do-sysdoc">
        <java classname="org.jhotdraw.sysdoc.SysdocMain">
            <classpath>
                <pathelement location="lib/doc/pegdown-1.6.0.jar"/>
                <pathelement location="lib/doc/parboiled-core-1.1.7.jar"/>
                <pathelement location="lib/doc/parboiled-java-1.1.7.jar"/>
                <pathelement location="lib/doc/asm-4.0.jar"/>
                <pathelement location="lib/doc/asm-analysis-4.0.jar"/>
                <pathelement location="lib/doc/asm-tree-4.0.jar"/>
                <pathelement location="${build.doc.classes}"/>
                <pathelement location="${jdk}/../lib/tools.jar"/>
            </classpath>           
            <arg value="-docdir"/>
            <arg value="${doc}/introduction"/>
            <arg value="-docdir"/>
            <arg value="${doc}/features"/>
            <arg value="-docdir"/>
            <arg value="${doc}/design"/>
            <arg value="-docdir"/>
            <arg value="${doc}/installation"/>
            <arg value="-docdir"/>
            <arg value="${doc}/guide"/>
            <arg value="-srcdir"/>
            <arg value="${src.main.java}"/>
            <arg value="-destdir"/>
            <arg value="${build.sysdoc}"/>
        </java>
    </target>
    <target name="do-jar" depends="init">
        <pathconvert property="manifest.class-path" pathsep=" " >
            <map from="${basedir}/${lib.runtime}/" to=""/>
            <fileset dir="${basedir}/${lib.runtime}">
                <exclude name=".*" />
                <include name="*.jar" />
            </fileset>
        </pathconvert>

        <jar destfile="${build.main.jars}/${ant.project.name}.jar">
            <!-- The attributes are structured into section has described here:
            https://docs.oracle.com/javase/8/docs/technotes/guides/jar/jar.html#Main_Attributes
            https://docs.oracle.com/javase/8/docs/technotes/guides/deploy/manifest.html
            -->
            <manifest>
                <!--
                  ~ Main Attributes
                -->
                <!-- general main attributes -->
                <attribute name="Manifest-Version" value="1.0"/>
                <attribute name="Created-By" value="${manifest.implementation-vendor}"/>
                <attribute name="Signature-Version" value="1.0"/>
                <attribute name="Class-Path" value="${manifest.class-path}"/>

                <!-- attribute defined for stand-alone applications -->
                <attribute name="Main-Class" value="${manifest.main-class}"/>

                <!-- attribute defined for extension identification -->
                <!-- attribute name="Extension-Name" value="..."/-->

                <!-- attributes defined for extension and package versioning and sealing information -->
                <attribute name="Implementation-Title" value="${manifest.application-name}"/>
                <attribute name="Implementation-Version" value="${manifest.implementation-version}"/>
                <attribute name="Implementation-Vendor" value="${manifest.implementation-vendor}"/>
                <attribute name="Specification-Title" value="${manifest.application-name}"/>
                <attribute name="Specification-Version" value="${manifest.implementation-version}"/>
                <attribute name="Specification-Vendor" value="${manifest.implementation-vendor}"/>
                <attribute name="Sealed" value="false"/>

                <!-- attributes for security -->
                <attribute name="Permissions" value="all-permissions"/>
                <attribute name="Codebase" value="*"/>
                <attribute name="Application-Name" value="${manifest.application-name}"/>
                <attribute name="Application-Library-Allowable-Codebase" value="*"/>
                <attribute name="Caller-Allowable-Codebase" value="*"/>
                <attribute name="Entry-Point" value="${manifest.main-class}"/>
                <attribute name="Trusted-Only" value="false"/>
                <attribute name="Trusted-Library" value="false"/>
            </manifest>
            <fileset dir="${build.main.classes}">
                <exclude name=".*"/>
            </fileset>
        </jar>
    </target>

    <target name="do-dist" depends="init">
        <mkdir dir="${dist}"/>
        <copy todir="${dist}">
            <fileset dir="${build.main.jars}">
                <exclude name=".*"/>
                <include name="*.jar"/>
            </fileset>
            <fileset dir="${lib.runtime}">
                <exclude name=".*"/>
                <include name="*.jar"/>
            </fileset>
        </copy>
        <jar file="${dist}/${ant.project.name}-source.jar">
            <fileset dir="${src}/main">
                <exclude name=".*"/>
            </fileset>
            <fileset dir=".">
                <include name="*.md"/>
            </fileset>
        </jar>
        <jar file="${dist}/${ant.project.name}-javadoc.jar">
            <fileset dir="${build.javadoc}">
                <exclude name=".*"/>
            </fileset>
        </jar>
    </target>

    <target name="clean" depends="do-clean" description="deletes all build artifacts including intermediate artifacts">
    </target>
    <target name="compile" depends="clean,do-compile.main,do-docbook.compile" description="compiles the java sources and copies resource files">
    </target>
    <target name="jar" depends="compile,do-jar" description="bundles the class files into a jar file">
    </target>
    <target name="javadoc" depends="clean,compile,do-docbook.compile,do-javadoc" description="generates api documentation">
    </target>
    <target name="sysdoc" depends="clean,compile,javadoc,do-sysdoc" description="generates specification and user documentation">
    </target>
    <target name="docbook" depends="clean,javadoc,do-docbook" description="generates specification and user documentation">
    </target>
    <target name="dist" depends="jar,javadoc,docbook,do-dist" description="Erstellt eine Distribution für eine Stand-Alone Applikation">
    </target>
    <target name="all" depends="dist" description="Erstellt alles">
    </target>
</project>

